}
inr_info <- readRDS("inr_info.rds")
patinfo <- readRDS("working_data.rds")
inr_info$patid <- as.factor(inr_info$patid)
patid_levels <- levels(inr_info$patid)
inr_info$inr_num <- rep(0,nrow(inr_info))
for(patid in patid_levels[1] ){
sub_inr <- inr_info[inr_info$patid==patid,]
sub_patinfo <- patinfo[patinfo$patid==patid,]
fst_dt_c <- sub_patinfo$fst_dt
fstsup_dt_c <- sub_patinfo$fst_sup
id_c <- sub_patinfo$id
inr_dt_c <- sub_inr$inr_dt
n_fst <- length(fst_dt_c)
n_inr <- length(inr_dt_c)
sub_inr_num <- rep(0,n_inr)
for(i in 1:n_inr){
inr_dt_i <- inr_dt_c[i]
max_dt <- max(fstsup_dt_c)
if (inr_dt_i <= max_dt) {
tmp <- (inr_dt_i >= fst_dt_c & inr_dt_i <= fstsup_dt_c)
# INR HAPPENS BEFORE THE LAST END OF SUPPLY DATE
# CASE 1: INR HAPPENS BETWEEN FILL DATE AND END OF SUPPLY DATE
if (any(tmp)) {
# FIND THE INDEX OF THE FIRST OVERLAPPING OCCURRENCE
min_tmp <- which.max(tmp)
sub_inr_num[i] <- id_c[min_tmp]
}
# CASE 2: INR DOES NOT HAPPEN BETWEEN THE OVERLAPPING PERIOD OF
# ANY FILL DATE AND END OF SUPPLY DATE
else if (!any(tmp)) {
tmp2 <- (inr_dt_i > fstsup_dt_c & inr_dt_i > fst_dt_c)
min_tmp <- which.min(tmp2)
sub_inr_num[i] <- id_c[min_tmp]
}
}
# CASE 3: INR HAPPENS AFTER THE LAST END OF SUPPLY DATE
else {
min_tmp <- which.max(fstsup_dt_c)
sub_inr_num[i] <- id_c[min_tmp]
}
}
inr_info$inr_num[inr_info$patid==patid] <- sub_inr_num
}
View(inr_info)
for( patid in patid_levels ){
sub_inr <- inr_info[inr_info$patid==patid,]
sub_patinfo <- patinfo[patinfo$patid==patid,]
fst_dt_c <- sub_patinfo$fst_dt
fstsup_dt_c <- sub_patinfo$fst_sup
id_c <- sub_patinfo$id
inr_dt_c <- sub_inr$inr_dt
n_fst <- length(fst_dt_c)
n_inr <- length(inr_dt_c)
sub_inr_num <- rep(0,n_inr)
for(i in 1:n_inr){
inr_dt_i <- inr_dt_c[i]
max_dt <- max(fstsup_dt_c)
if (inr_dt_i <= max_dt) {
tmp <- (inr_dt_i >= fst_dt_c & inr_dt_i <= fstsup_dt_c)
# INR HAPPENS BEFORE THE LAST END OF SUPPLY DATE
# CASE 1: INR HAPPENS BETWEEN FILL DATE AND END OF SUPPLY DATE
if (any(tmp)) {
# FIND THE INDEX OF THE FIRST OVERLAPPING OCCURRENCE
min_tmp <- which.max(tmp)
sub_inr_num[i] <- id_c[min_tmp]
}
# CASE 2: INR DOES NOT HAPPEN BETWEEN THE OVERLAPPING PERIOD OF
# ANY FILL DATE AND END OF SUPPLY DATE
else if (!any(tmp)) {
tmp2 <- (inr_dt_i > fstsup_dt_c & inr_dt_i > fst_dt_c)
min_tmp <- which.min(tmp2)
sub_inr_num[i] <- id_c[min_tmp]
}
}
# CASE 3: INR HAPPENS AFTER THE LAST END OF SUPPLY DATE
else {
min_tmp <- which.max(fstsup_dt_c)
sub_inr_num[i] <- id_c[min_tmp]
}
}
inr_info$inr_num[inr_info$patid==patid] <- sub_inr_num
}
patinfo <- readRDS("patinfo_rm_lmwh.rds")
patinfo <- patinfo %>%
group_by(patid, category) %>%
mutate(id = (category=="DOACS")*seq(from=45, by=-0.25, length.out=n()) +
(category=="LMWH")*seq(from=30, by=-0.25, length.out=n()) +
(category=="Warfarin")*seq(from=15, by=-0.25, length.out=n()),
category_num = 36*(category=="DOACS") + 24*(category=="LMWH") + 8*(category=="Warfarin")) %>%
ungroup(category)
saveRDS(patinfo, "ac_pattern3\\working_data.rds")
getwd()
saveRDS(patinfo, "working_data.rds")
patinfo <- readRDS("working_data.rds")
inr_info$patid <- as.factor(inr_info$patid)
patid_levels <- levels(inr_info$patid)
inr_info$inr_num <- rep(0,nrow(inr_info))
for( patid in patid_levels ){
sub_inr <- inr_info[inr_info$patid==patid,]
sub_patinfo <- patinfo[patinfo$patid==patid,]
fst_dt_c <- sub_patinfo$fst_dt
fstsup_dt_c <- sub_patinfo$fst_sup
id_c <- sub_patinfo$id
inr_dt_c <- sub_inr$inr_dt
n_fst <- length(fst_dt_c)
n_inr <- length(inr_dt_c)
sub_inr_num <- rep(0,n_inr)
for(i in 1:n_inr){
inr_dt_i <- inr_dt_c[i]
max_dt <- max(fstsup_dt_c)
if (inr_dt_i <= max_dt) {
tmp <- (inr_dt_i >= fst_dt_c & inr_dt_i <= fstsup_dt_c)
# INR HAPPENS BEFORE THE LAST END OF SUPPLY DATE
# CASE 1: INR HAPPENS BETWEEN FILL DATE AND END OF SUPPLY DATE
if (any(tmp)) {
# FIND THE INDEX OF THE FIRST OVERLAPPING OCCURRENCE
min_tmp <- which.max(tmp)
sub_inr_num[i] <- id_c[min_tmp]
}
# CASE 2: INR DOES NOT HAPPEN BETWEEN THE OVERLAPPING PERIOD OF
# ANY FILL DATE AND END OF SUPPLY DATE
else if (!any(tmp)) {
tmp2 <- (inr_dt_i > fstsup_dt_c & inr_dt_i > fst_dt_c)
min_tmp <- which.min(tmp2)
sub_inr_num[i] <- id_c[min_tmp]
}
}
# CASE 3: INR HAPPENS AFTER THE LAST END OF SUPPLY DATE
else {
min_tmp <- which.max(fstsup_dt_c)
sub_inr_num[i] <- id_c[min_tmp]
}
}
inr_info$inr_num[inr_info$patid==patid] <- sub_inr_num
}
View(inr_info)
saveRDS(inr_info, "working_data_inr.rds")
patinfo <- readRDS("working_data_pat.rds")
inr_info <- readRDS("working_data_inr.rds")
shiny::runApp()
inr_info$inr_num_end <- inr_info$inr_num - 0.7
saveRDS(inr_info, "working_data_inr.rds")
inr_info <- readRDS("inr_info.rds")
patinfo <- readRDS("working_data_pat.rds")
inr_info$patid <- as.factor(inr_info$patid)
patid_levels <- levels(inr_info$patid)
inr_info$inr_num <- rep(0,nrow(inr_info))
for( patid in patid_levels ){
sub_inr <- inr_info[inr_info$patid==patid,]
sub_patinfo <- patinfo[patinfo$patid==patid,]
fst_dt_c <- sub_patinfo$fst_dt
fstsup_dt_c <- sub_patinfo$fst_sup
id_c <- sub_patinfo$id
inr_dt_c <- sub_inr$inr_dt
n_fst <- length(fst_dt_c)
n_inr <- length(inr_dt_c)
sub_inr_num <- rep(0,n_inr)
for(i in 1:n_inr){
inr_dt_i <- inr_dt_c[i]
max_dt <- max(fstsup_dt_c)
if (inr_dt_i <= max_dt) {
tmp <- (inr_dt_i >= fst_dt_c & inr_dt_i <= fstsup_dt_c)
# INR HAPPENS BEFORE THE LAST END OF SUPPLY DATE
# CASE 1: INR HAPPENS BETWEEN FILL DATE AND END OF SUPPLY DATE
if (any(tmp)) {
# FIND THE INDEX OF THE FIRST OVERLAPPING OCCURRENCE
min_tmp <- which.max(tmp)
sub_inr_num[i] <- id_c[min_tmp]
}
# CASE 2: INR DOES NOT HAPPEN BETWEEN THE OVERLAPPING PERIOD OF
# ANY FILL DATE AND END OF SUPPLY DATE
else if (!any(tmp)) {
tmp2 <- (inr_dt_i > fstsup_dt_c & inr_dt_i > fst_dt_c)
min_tmp <- which.min(tmp2)
sub_inr_num[i] <- id_c[min_tmp]
}
}
# CASE 3: INR HAPPENS AFTER THE LAST END OF SUPPLY DATE
else {
min_tmp <- which.max(fstsup_dt_c)
sub_inr_num[i] <- id_c[min_tmp]
}
}
inr_info$inr_num[inr_info$patid==patid] <- sub_inr_num
}
inr_info$inr_num_start <- inr_info$inr_num - 0.7
saveRDS(inr_info, "working_data_inr.rds")
View(patinfo)
rep("0",3)
inr_info$patid <- as.factor(inr_info$patid)
patid_levels <- levels(inr_info$patid)
inr_info$inr_num <- rep(0,nrow(inr_info))
inr_info$category <- rep("0",nrow(inr_info))
for( patid in patid_levels ){
sub_inr <- inr_info[inr_info$patid==patid,]
sub_patinfo <- patinfo[patinfo$patid==patid,]
fst_dt_c <- sub_patinfo$fst_dt
fstsup_dt_c <- sub_patinfo$fst_sup
id_c <- sub_patinfo$id
category_c <- sub_patinfo$category
inr_dt_c <- sub_inr$inr_dt
n_fst <- length(fst_dt_c)
n_inr <- length(inr_dt_c)
sub_inr_num <- rep(0,n_inr)
sub_inr_category <- rep("0", n_inr)
for(i in 1:n_inr){
inr_dt_i <- inr_dt_c[i]
max_dt <- max(fstsup_dt_c)
if (inr_dt_i <= max_dt) {
tmp <- (inr_dt_i >= fst_dt_c & inr_dt_i <= fstsup_dt_c)
# INR HAPPENS BEFORE THE LAST END OF SUPPLY DATE
# CASE 1: INR HAPPENS BETWEEN FILL DATE AND END OF SUPPLY DATE
if (any(tmp)) {
# FIND THE INDEX OF THE FIRST OVERLAPPING OCCURRENCE
min_tmp <- which.max(tmp)
sub_inr_num[i] <- id_c[min_tmp]
sub_inr_category[i] <- category_c[min_tmp]
}
# CASE 2: INR DOES NOT HAPPEN BETWEEN THE OVERLAPPING PERIOD OF
# ANY FILL DATE AND END OF SUPPLY DATE
else if (!any(tmp)) {
tmp2 <- (inr_dt_i > fstsup_dt_c & inr_dt_i > fst_dt_c)
min_tmp <- which.min(tmp2)
sub_inr_num[i] <- id_c[min_tmp]
sub_inr_category[i] <- category_c[min_tmp]
}
}
# CASE 3: INR HAPPENS AFTER THE LAST END OF SUPPLY DATE
else {
min_tmp <- which.max(fstsup_dt_c)
sub_inr_num[i] <- id_c[min_tmp]
sub_inr_category[i] <- category_c[min_tmp]
}
}
inr_info$inr_num[inr_info$patid==patid] <- sub_inr_num
inr_info$category[inr_info$patid==patid] <- sub_inr_category
}
sub_inr_category
length(sub_inr_category)
patid <- patid_levels[5]
sub_inr <- inr_info[inr_info$patid==patid,]
patid <- patid_levels[6]
sub_inr <- inr_info[inr_info$patid==patid,]
sub_patinfo <- patinfo[patinfo$patid==patid,]
fst_dt_c <- sub_patinfo$fst_dt
fstsup_dt_c <- sub_patinfo$fst_sup
id_c <- sub_patinfo$id
category_c <- sub_patinfo$category
inr_dt_c <- sub_inr$inr_dt
n_fst <- length(fst_dt_c)
n_inr <- length(inr_dt_c)
sub_inr_num <- rep(0,n_inr)
sub_inr_category <- rep("0", n_inr)
for(i in 1:n_inr){
inr_dt_i <- inr_dt_c[i]
max_dt <- max(fstsup_dt_c)
if (inr_dt_i <= max_dt) {
tmp <- (inr_dt_i >= fst_dt_c & inr_dt_i <= fstsup_dt_c)
# INR HAPPENS BEFORE THE LAST END OF SUPPLY DATE
# CASE 1: INR HAPPENS BETWEEN FILL DATE AND END OF SUPPLY DATE
if (any(tmp)) {
# FIND THE INDEX OF THE FIRST OVERLAPPING OCCURRENCE
min_tmp <- which.max(tmp)
sub_inr_num[i] <- id_c[min_tmp]
sub_inr_category[i] <- category_c[min_tmp]
}
# CASE 2: INR DOES NOT HAPPEN BETWEEN THE OVERLAPPING PERIOD OF
# ANY FILL DATE AND END OF SUPPLY DATE
else if (!any(tmp)) {
tmp2 <- (inr_dt_i > fstsup_dt_c & inr_dt_i > fst_dt_c)
min_tmp <- which.min(tmp2)
sub_inr_num[i] <- id_c[min_tmp]
sub_inr_category[i] <- category_c[min_tmp]
}
}
# CASE 3: INR HAPPENS AFTER THE LAST END OF SUPPLY DATE
else {
min_tmp <- which.max(fstsup_dt_c)
sub_inr_num[i] <- id_c[min_tmp]
sub_inr_category[i] <- category_c[min_tmp]
}
}
patid
sub_patinfo
i=5
inr_dt_i <- inr_dt_c[i]
max_dt <- max(fstsup_dt_c)
inr_dt_i <= max_dt
tmp <- (inr_dt_i >= fst_dt_c & inr_dt_i <= fstsup_dt_c)
tmp
min_tmp <- which.max(tmp)
category_c
category_c[min_tmp]
sub_inr_category <- rep("0", n_inr)
sub_inr_category[i] <- category_c[min_tmp]
sub_inr_category
droplevels(category_c)
as.character(category_c)
sub_inr_category[i] <- as.character(category_c)[min_tmp]
sub_inr_category
inr_info$patid <- as.factor(inr_info$patid)
patid_levels <- levels(inr_info$patid)
inr_info$inr_num <- rep(0,nrow(inr_info))
inr_info$category <- rep("0",nrow(inr_info))
for( patid in patid_levels ){
sub_inr <- inr_info[inr_info$patid==patid,]
sub_patinfo <- patinfo[patinfo$patid==patid,]
fst_dt_c <- sub_patinfo$fst_dt
fstsup_dt_c <- sub_patinfo$fst_sup
id_c <- sub_patinfo$id
category_c <- as.character(sub_patinfo$category)
inr_dt_c <- sub_inr$inr_dt
n_fst <- length(fst_dt_c)
n_inr <- length(inr_dt_c)
sub_inr_num <- rep(0,n_inr)
sub_inr_category <- rep("0", n_inr)
for(i in 1:n_inr){
inr_dt_i <- inr_dt_c[i]
max_dt <- max(fstsup_dt_c)
if (inr_dt_i <= max_dt) {
tmp <- (inr_dt_i >= fst_dt_c & inr_dt_i <= fstsup_dt_c)
# INR HAPPENS BEFORE THE LAST END OF SUPPLY DATE
# CASE 1: INR HAPPENS BETWEEN FILL DATE AND END OF SUPPLY DATE
if (any(tmp)) {
# FIND THE INDEX OF THE FIRST OVERLAPPING OCCURRENCE
min_tmp <- which.max(tmp)
sub_inr_num[i] <- id_c[min_tmp]
sub_inr_category[i] <- category_c[min_tmp]
}
# CASE 2: INR DOES NOT HAPPEN BETWEEN THE OVERLAPPING PERIOD OF
# ANY FILL DATE AND END OF SUPPLY DATE
else if (!any(tmp)) {
tmp2 <- (inr_dt_i > fstsup_dt_c & inr_dt_i > fst_dt_c)
min_tmp <- which.min(tmp2)
sub_inr_num[i] <- id_c[min_tmp]
sub_inr_category[i] <- category_c[min_tmp]
}
}
# CASE 3: INR HAPPENS AFTER THE LAST END OF SUPPLY DATE
else {
min_tmp <- which.max(fstsup_dt_c)
sub_inr_num[i] <- id_c[min_tmp]
sub_inr_category[i] <- category_c[min_tmp]
}
}
inr_info$inr_num[inr_info$patid==patid] <- sub_inr_num
inr_info$category[inr_info$patid==patid] <- sub_inr_category
}
inr_info$category <- as.factor(inr_info$category)
inr_info$inr_num_start <- inr_info$inr_num - 0.7
saveRDS(inr_info, "working_data_inr.rds")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("grid")
install.packages("grid")
install.packages("grid")
library(grid)
shiny::runApp()
runApp()
runApp()
patinfo <- readRDS("patinfo_rm_lmwh.rds")
View(patinfo)
patinfo <- patinfo %>%
filter(fst_dt >= index_dt)
patinfo <- patinfo %>%
filter(fst_dt >= index_dt) %>%
group_by(patid, category) %>%
mutate(id = (category=="DOACS")*seq(from=45, by=-0.25, length.out=n()) +
(category=="LMWH")*seq(from=30, by=-0.25, length.out=n()) +
(category=="Warfarin")*seq(from=15, by=-0.25, length.out=n()),
category_num = 36*(category=="DOACS") + 24*(category=="LMWH") + 8*(category=="Warfarin")) %>%
ungroup(category)
saveRDS(patinfo, "working_data.rds")
inr_info <- read.csv("lab_inr.csv")
inr_info <- inr_info %>% mutate(patid = as.character(patid),
index_dt = as.Date(strptime(index_dt, "%m/%d/%Y")),
inr_dt = as.Date(strptime(inr_dt, "%m/%d/%Y")))
saveRDS(inr_info, "inr_info.rds")
inr_info <- readRDS("inr_info.rds")
patinfo <- readRDS("working_data_pat.rds")
inr_info$patid <- as.factor(inr_info$patid)
patid_levels <- levels(inr_info$patid)
inr_info$inr_num <- rep(0,nrow(inr_info))
inr_info$category <- rep("0",nrow(inr_info))
for( patid in patid_levels ){
sub_inr <- inr_info[inr_info$patid==patid,]
sub_patinfo <- patinfo[patinfo$patid==patid,]
fst_dt_c <- sub_patinfo$fst_dt
fstsup_dt_c <- sub_patinfo$fst_sup
id_c <- sub_patinfo$id
category_c <- as.character(sub_patinfo$category)
inr_dt_c <- sub_inr$inr_dt
n_fst <- length(fst_dt_c)
n_inr <- length(inr_dt_c)
sub_inr_num <- rep(0,n_inr)
sub_inr_category <- rep("0", n_inr)
for(i in 1:n_inr){
inr_dt_i <- inr_dt_c[i]
max_dt <- max(fstsup_dt_c)
if (inr_dt_i <= max_dt) {
tmp <- (inr_dt_i >= fst_dt_c & inr_dt_i <= fstsup_dt_c)
# INR HAPPENS BEFORE THE LAST END OF SUPPLY DATE
# CASE 1: INR HAPPENS BETWEEN FILL DATE AND END OF SUPPLY DATE
if (any(tmp)) {
# FIND THE INDEX OF THE FIRST OVERLAPPING OCCURRENCE
min_tmp <- which.max(tmp)
sub_inr_num[i] <- id_c[min_tmp]
sub_inr_category[i] <- category_c[min_tmp]
}
# CASE 2: INR DOES NOT HAPPEN BETWEEN THE OVERLAPPING PERIOD OF
# ANY FILL DATE AND END OF SUPPLY DATE
else if (!any(tmp)) {
tmp2 <- (inr_dt_i > fstsup_dt_c & inr_dt_i > fst_dt_c)
min_tmp <- which.min(tmp2)
sub_inr_num[i] <- id_c[min_tmp]
sub_inr_category[i] <- category_c[min_tmp]
}
}
# CASE 3: INR HAPPENS AFTER THE LAST END OF SUPPLY DATE
else {
min_tmp <- which.max(fstsup_dt_c)
sub_inr_num[i] <- id_c[min_tmp]
sub_inr_category[i] <- category_c[min_tmp]
}
}
inr_info$inr_num[inr_info$patid==patid] <- sub_inr_num
inr_info$category[inr_info$patid==patid] <- sub_inr_category
}
inr_info$category <- as.factor(inr_info$category)
inr_info$inr_num_start <- inr_info$inr_num - 0.7
View(inr_info)
View(inr_info)
View(patinfo)
patinfo <- readRDS("working_data_pat.rds")
runApp()
install.packages("grid")
install.packages("grid")
?arrow
?grid::arrow
arrow(angle = 30, length = unit(0.25, "inches"),
ends = "last", type = "open")
library(grid)
library(grid)  # you should get a message
help(pac=grid)
rownames(subset(as.data.frame(installed.packages()),Priority=="base"))
brew uninstall r
list.of.packages <- c("ggplot2", "Rcpp")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
list.of.packages <- c("grid")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
install.packages("base")
install.packages("base")
install.packages("base")
install.packages("base")
install.packages("base")
install.packages("base")
install.packages("base")
install.packages("base")
install.packages("base")
?grid::arrow
?arrow
?arrow()
shiny::runApp()
runApp()
runApp()
runApp()
?annotate
runApp()
runApp()
x <- stats::runif(12); y <- stats::rnorm(12)
i <- order(x, y); x <- x[i]; y <- y[i]
plot(x,y, main = "arrows(.) and segments(.)")
## draw arrows from point to point :
s <- seq(length(x)-1)  # one shorter than data
arrows(x[s], y[s], x[s+1], y[s+1], col = 1:3)
?arrows
?arrow
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
patinfo <- readRDS("working_data_added.rds")
inr_info <- readRDS("working_data_inr_added.rds")
source('try/app.R')
View(patinfo)
runApp()
?chartSeries
runApp()
runApp()
View(inr_info)
runApp()
runApp()
runApp()
runApp()
